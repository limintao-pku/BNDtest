// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// get_prob_list
List get_prob_list(int n_p_h, NumericVector p0, int n1, int n11, int n2, int n21);
RcppExport SEXP _BNDtest_get_prob_list(SEXP n_p_hSEXP, SEXP p0SEXP, SEXP n1SEXP, SEXP n11SEXP, SEXP n2SEXP, SEXP n21SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_p_h(n_p_hSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type p0(p0SEXP);
    Rcpp::traits::input_parameter< int >::type n1(n1SEXP);
    Rcpp::traits::input_parameter< int >::type n11(n11SEXP);
    Rcpp::traits::input_parameter< int >::type n2(n2SEXP);
    Rcpp::traits::input_parameter< int >::type n21(n21SEXP);
    rcpp_result_gen = Rcpp::wrap(get_prob_list(n_p_h, p0, n1, n11, n2, n21));
    return rcpp_result_gen;
END_RCPP
}
// which_loc
int which_loc(int loc_i, int loc_j, IntegerVector select_i, IntegerVector select_j);
RcppExport SEXP _BNDtest_which_loc(SEXP loc_iSEXP, SEXP loc_jSEXP, SEXP select_iSEXP, SEXP select_jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type loc_i(loc_iSEXP);
    Rcpp::traits::input_parameter< int >::type loc_j(loc_jSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type select_i(select_iSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type select_j(select_jSEXP);
    rcpp_result_gen = Rcpp::wrap(which_loc(loc_i, loc_j, select_i, select_j));
    return rcpp_result_gen;
END_RCPP
}
// BNDtest_get_prob
NumericVector BNDtest_get_prob(int loc_i, int loc_j, int n1, int n2, int n_p, int n_pm1, int n_p_h, List prob_list, bool twoside);
RcppExport SEXP _BNDtest_BNDtest_get_prob(SEXP loc_iSEXP, SEXP loc_jSEXP, SEXP n1SEXP, SEXP n2SEXP, SEXP n_pSEXP, SEXP n_pm1SEXP, SEXP n_p_hSEXP, SEXP prob_listSEXP, SEXP twosideSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type loc_i(loc_iSEXP);
    Rcpp::traits::input_parameter< int >::type loc_j(loc_jSEXP);
    Rcpp::traits::input_parameter< int >::type n1(n1SEXP);
    Rcpp::traits::input_parameter< int >::type n2(n2SEXP);
    Rcpp::traits::input_parameter< int >::type n_p(n_pSEXP);
    Rcpp::traits::input_parameter< int >::type n_pm1(n_pm1SEXP);
    Rcpp::traits::input_parameter< int >::type n_p_h(n_p_hSEXP);
    Rcpp::traits::input_parameter< List >::type prob_list(prob_listSEXP);
    Rcpp::traits::input_parameter< bool >::type twoside(twosideSEXP);
    rcpp_result_gen = Rcpp::wrap(BNDtest_get_prob(loc_i, loc_j, n1, n2, n_p, n_pm1, n_p_h, prob_list, twoside));
    return rcpp_result_gen;
END_RCPP
}
// path_get_prob
NumericVector path_get_prob(IntegerVector select_i, IntegerVector select_j, int loc_des, int n1, int n2, int n_p, int n_pm1, int n_p_h, List prob_list, bool twoside, bool trace);
RcppExport SEXP _BNDtest_path_get_prob(SEXP select_iSEXP, SEXP select_jSEXP, SEXP loc_desSEXP, SEXP n1SEXP, SEXP n2SEXP, SEXP n_pSEXP, SEXP n_pm1SEXP, SEXP n_p_hSEXP, SEXP prob_listSEXP, SEXP twosideSEXP, SEXP traceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type select_i(select_iSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type select_j(select_jSEXP);
    Rcpp::traits::input_parameter< int >::type loc_des(loc_desSEXP);
    Rcpp::traits::input_parameter< int >::type n1(n1SEXP);
    Rcpp::traits::input_parameter< int >::type n2(n2SEXP);
    Rcpp::traits::input_parameter< int >::type n_p(n_pSEXP);
    Rcpp::traits::input_parameter< int >::type n_pm1(n_pm1SEXP);
    Rcpp::traits::input_parameter< int >::type n_p_h(n_p_hSEXP);
    Rcpp::traits::input_parameter< List >::type prob_list(prob_listSEXP);
    Rcpp::traits::input_parameter< bool >::type twoside(twosideSEXP);
    Rcpp::traits::input_parameter< bool >::type trace(traceSEXP);
    rcpp_result_gen = Rcpp::wrap(path_get_prob(select_i, select_j, loc_des, n1, n2, n_p, n_pm1, n_p_h, prob_list, twoside, trace));
    return rcpp_result_gen;
END_RCPP
}
// BNDtest_loop
List BNDtest_loop(NumericVector p_prob_max, int p_l, IntegerVector p_i, IntegerVector p_j, int k, int n0, bool trace, int select_i0, int select_j0, List p_prob, List p_prob_indiv, int n1, int n2, std::vector<int> select_i, std::vector<int> select_j, bool twoside, int n_p, int n_pm1, int n_p_h, List prob_list, NumericVector p0, std::string alternative);
RcppExport SEXP _BNDtest_BNDtest_loop(SEXP p_prob_maxSEXP, SEXP p_lSEXP, SEXP p_iSEXP, SEXP p_jSEXP, SEXP kSEXP, SEXP n0SEXP, SEXP traceSEXP, SEXP select_i0SEXP, SEXP select_j0SEXP, SEXP p_probSEXP, SEXP p_prob_indivSEXP, SEXP n1SEXP, SEXP n2SEXP, SEXP select_iSEXP, SEXP select_jSEXP, SEXP twosideSEXP, SEXP n_pSEXP, SEXP n_pm1SEXP, SEXP n_p_hSEXP, SEXP prob_listSEXP, SEXP p0SEXP, SEXP alternativeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type p_prob_max(p_prob_maxSEXP);
    Rcpp::traits::input_parameter< int >::type p_l(p_lSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type p_i(p_iSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type p_j(p_jSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type n0(n0SEXP);
    Rcpp::traits::input_parameter< bool >::type trace(traceSEXP);
    Rcpp::traits::input_parameter< int >::type select_i0(select_i0SEXP);
    Rcpp::traits::input_parameter< int >::type select_j0(select_j0SEXP);
    Rcpp::traits::input_parameter< List >::type p_prob(p_probSEXP);
    Rcpp::traits::input_parameter< List >::type p_prob_indiv(p_prob_indivSEXP);
    Rcpp::traits::input_parameter< int >::type n1(n1SEXP);
    Rcpp::traits::input_parameter< int >::type n2(n2SEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type select_i(select_iSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type select_j(select_jSEXP);
    Rcpp::traits::input_parameter< bool >::type twoside(twosideSEXP);
    Rcpp::traits::input_parameter< int >::type n_p(n_pSEXP);
    Rcpp::traits::input_parameter< int >::type n_pm1(n_pm1SEXP);
    Rcpp::traits::input_parameter< int >::type n_p_h(n_p_hSEXP);
    Rcpp::traits::input_parameter< List >::type prob_list(prob_listSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type p0(p0SEXP);
    Rcpp::traits::input_parameter< std::string >::type alternative(alternativeSEXP);
    rcpp_result_gen = Rcpp::wrap(BNDtest_loop(p_prob_max, p_l, p_i, p_j, k, n0, trace, select_i0, select_j0, p_prob, p_prob_indiv, n1, n2, select_i, select_j, twoside, n_p, n_pm1, n_p_h, prob_list, p0, alternative));
    return rcpp_result_gen;
END_RCPP
}
// copy_list
List copy_list(List x, int n, int n_each);
RcppExport SEXP _BNDtest_copy_list(SEXP xSEXP, SEXP nSEXP, SEXP n_eachSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type n_each(n_eachSEXP);
    rcpp_result_gen = Rcpp::wrap(copy_list(x, n, n_each));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BNDtest_get_prob_list", (DL_FUNC) &_BNDtest_get_prob_list, 6},
    {"_BNDtest_which_loc", (DL_FUNC) &_BNDtest_which_loc, 4},
    {"_BNDtest_BNDtest_get_prob", (DL_FUNC) &_BNDtest_BNDtest_get_prob, 9},
    {"_BNDtest_path_get_prob", (DL_FUNC) &_BNDtest_path_get_prob, 11},
    {"_BNDtest_BNDtest_loop", (DL_FUNC) &_BNDtest_BNDtest_loop, 22},
    {"_BNDtest_copy_list", (DL_FUNC) &_BNDtest_copy_list, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_BNDtest(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
